1.创建一个版本库：
	$ mkdir learngit    //learngit为创建的版本库的文件夹
	$ cd learngit
	$ pwd
	/Users/michael/learngit

2.通过git init命令把这个目录变成Git可以管理的仓库：
	$ git init
	Initialized empty Git repository in /Users/michael/learngit/.git/
	*：初始化一个Git仓库，使用git init命令。

*：如果你没有看到.git目录，那是因为这个目录默认是隐藏的，用ls -ah命令就可以看见

3.编写一个readme.txt文件并写入文本，一定要放到learngit目录下（子目录也行）
4.第一步，用命令git add告诉Git，把文件添加到仓库：
	$ git add readme.txt
	$ git add file2.txt file3.txt   //同事添加多个文件以空格为界
5.第二步，用命令git commit告诉Git，把文件提交到仓库：
	$ git commit -m "wrote a readme file"
	[master (root-commit) cb926e7] wrote a readme file
	 1 file changed, 2 insertions(+)
	 create mode 100644 readme.txt

注意：
	初始化一个Git仓库，使用git init命令。
	添加文件到Git仓库，分两步：
		第一步，使用命令git add <file>，注意，可反复多次使用，添加多个文件；
		第二步，使用命令git commit，完成。

6.修改问价后查看修改结果，运行git status命令
	$ git status
	# On branch master
	# Changes not staged for commit:
	#   (use "git add <file>..." to update what will be committed)
	#   (use "git checkout -- <file>..." to discard changes in working directory)
	#
	#    modified:   readme.txt
	#
	no changes added to commit (use "git add" and/or "git commit -a")

7.查看具体修改详情  命令：git diff
	$ git diff readme.txt
	diff --git a/readme.txt b/readme.txt
	index 46d49bf..9247db6 100644
	--- a/readme.txt
	+++ b/readme.txt
	@@ -1,2 +1,2 @@
	-Git is a version control system.     //这里是删除的内容
	+Git is a distributed version control system.   //这里是添加的内容
	 Git is free software.    //这里是不变的内容

8.再把它提交到仓库就放心多了，提交修改和提交新文件是一样的两步，第一步是git add：
	$ git add readme.txt
	8.1.同样没有任何输出。在执行第二步git commit之前，我们再运行git status看看当前仓库的状态：
		$ git status
		# On branch master
		# Changes to be committed:
		#   (use "git reset HEAD <file>..." to unstage)
		#
		#       modified:   readme.txt
		#
	8.2.git status告诉我们，将要被提交的修改包括readme.txt，下一步，就可以放心地提交了：
		$ git commit -m "add distributed"   //-m 'xxxx'是修改说明
		[master ea34578] add distributed
		 1 file changed, 1 insertion(+), 1 deletion(-)
	8.3.提交后，我们再用git status命令看看仓库的当前状态：
		$ git status
		# On branch master
		nothing to commit (working directory clean)

9.查看历史记录及详情，命令git log
	$ git log
	9.1.查看历史记录的状态，命令git log --pretty=oneline

10.准备把readme.txt回退到上一个版本，用HEAD表示当前版本，也就是最新的提交3628164...882e1e0（注意我的提交ID和你的肯定不一样），上一个版本就是HEAD^，上上一个版本就是HEAD^^，当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100
	10.1现在，我们要把当前版本“append GPL”回退到上一个版本“add distributed”，就可以使用git reset命令：
		$ git reset --hard HEAD^
		HEAD is now at ea34578 add distributed
	10.2看看readme.txt的内容是不是版本add distributed：   用cat readme.txt
		$ cat readme.txt
		Git is a distributed version control system.
		Git is free software.
	10.3最新的那个版本append GPL已经看不到了?好比你从21世纪坐时光穿梭机来到了19世纪，想再回去已经回不去了，肿么办？
		办法其实还是有的，只要上面的命令行窗口还没有被关掉，你就可以顺着往上找啊找啊，找到那个append GPL的commit id是3628164...，于是就可以指定回到未来的某个版本：
			$ git reset --hard 3628164
			HEAD is now at 3628164 append GPL
	10.4版本号没必要写全，前几位就可以了，Git会自动去找。当然也不能只写前一两位，因为Git可能会找到多个版本号，就无法确定是哪一个了。
		再小心翼翼地看看readme.txt的内容：
			$ cat readme.txt
			Git is a distributed version control system.
			Git is free software distributed under the GPL.
	10.5现在，你回退到了某个版本，关掉了电脑，第二天早上就后悔了，想恢复到新版本怎么办？找不到新版本的commit id怎么办？
		在Git中，总是有后悔药可以吃的。当你用$ git reset --hard HEAD^回退到add distributed版本时，再想恢复到append GPL，就必须找到append GPL的commit 
		id。Git提供了一个命令git reflog用来记录你的每一次命令：
			$ git reflog
			ea34578 HEAD@{0}: reset: moving to HEAD^
			3628164 HEAD@{1}: commit: append GPL
			ea34578 HEAD@{2}: commit: add distributed
			cb926e7 HEAD@{3}: commit (initial): wrote a readme file

	注意：现在总结一下：
		HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令git reset --hard commit_id。
		穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本。
		要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本。